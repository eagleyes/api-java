schema {
	query: Query
	mutation: Mutation
}

# Complex Input
input PagingInput {
	pageNumber: Int!
	pageSize: Int!
	sortField: [String]!
	sortOrder: [String]!
}

input MailingAddressInput {
	street: String!
	city: String!
	province: String!
	countryCode: String!
	postalCode: String!
}

input NameInput {
	firstName: String
	middleName: String
	lastName: String
	salutation: String
}

input CommunicationInput {
	jobTitle: String
	language: String
	email: String
	phoneNumber: String
	phoneExtension: String
	faxNumber: String
}

input BusinessPositionInput {
	sector: String
	unit: String
	classification: String
}

# Filtering Criteria Input
input OrganizationFilter {
	displayName: String
	status: String
}

input LocationFilter {
	organizationId: String
	displayName: String
	status: String
}

input PersonFilter {
	organizationId: String
	displayName: String
	status: String
}

input UserFilter {
	organizationId: String
	personId: String
	status: String
	role: String	
}

type Query {	
	# Organization Service 
	findOrganization(organizationId: String!): Organization	
	countOrganizations(filter: OrganizationFilter!): Int!
	findOrganizations(filter: OrganizationFilter!, paging: PagingInput!): OrganizationPage!
	
	# Location Service
	findLocation(locationId: String!): Location
	countLocations(filter: LocationFilter!): Int!
	findLocations(filter: LocationFilter!, paging: PagingInput!): LocationPage!
	
	# Person Service
	findPerson(personId: String!): Person
	countPersons(filter: PersonFilter!): Int!
	findPersons(filter: PersonFilter!, paging: PagingInput!): PersonPage!
	
	# User Service
	findUser(username: String!): User
	countUsers(filter: UserFilter!): Int!
	findUsers(filter: UserFilter!, paging: PagingInput!): UserPage!
	
	# Lookup Service
	findCodeLookups(category: String!, code: String): [CodeLookup]
}

type Mutation {
	# Organization Service 
	createOrganization(organizationDisplayName: String!): Organization
	updateOrganization(organizationId: String!, organizationDisplayName: String, locationId: String): Organization
	enableOrganization(organizationId: String!): Organization
	disableOrganization(organizationId: String!): Organization	
	
	# Location Service
	createLocation(organizationId: String!, locationName: String!, locationReference: String!, locationAddress: MailingAddressInput!): Location
	updateLocation(locationId: String!, locationName: String, locationAddress: MailingAddressInput): Location
	enableLocation(locationId: String!): Location
	disableLocation(locationId: String!): Location
	
	# Person Service
	createPerson(organizationId: String!, name: NameInput!, address: MailingAddressInput!, communication: CommunicationInput!, position: BusinessPositionInput!): Person
	updatePerson(personId: String!, name: NameInput, address: MailingAddressInput, communication: CommunicationInput, position: BusinessPositionInput): Person
	enablePerson(personId: String!): Person
	disablePerson(personId: String!): Person	
		
	# User Service
	createUser(personId: String!, username: String!, roles: [String]): User
	enableUser(username: String!): Location
	disableUser(username: String!): Location	
	addUserRole(username: String!, role: String!): User
	removeUserRole(username: String!, role: String!): User
	setUserRoles(username: String!, roles: [String]): User
	setUserPassword(username: String!, password: String!): User
}

# Main Types
type Organization {
	organizationId: String!
	status: String!
	displayName: String!
	mainLocation: Location
}

type Location {
	locationId: String!
	organizationId: String!
	status: String!
	reference: String
	displayName: String
	address: MailingAddress	
}

type Person {
	personId: String!
	organizationId: String!
	status: String!
	displayName: String
	legalName: PersonName
	address: MailingAddress
	communication: Communication
	position: BusinessPosition
}

# Complex Subtypes
type Communication {
	jobTitle: String
	language: String
	email: String
	homePhone: Telephone
	faxNumber: String
}

type PersonName {
	firstName: String
	middleName: String
	lastName: String
	salutation: String
}

type BusinessPosition {
	sector: String
	unit: String
	classification: String
}

type User {
	userId: String!
	status: String!
	person: Person!
	roles: [String]!
}

type MailingAddress {
	street: String
	city: String
	province: String
	country: String
	postalCode: String
}

# Pagination Types
type OrganizationPage {
	number: Int!
	numberOfElements: Int!
	size: Int!
	totalPages: Int!
	totalElements: Int!	
	content: [Organization]	
}

type LocationPage {
	number: Int!
	numberOfElements: Int!
	size: Int!
	totalPages: Int!
	totalElements: Int!	
	content: [Location]	
}

type PersonPage {
	number: Int!
	numberOfElements: Int!
	size: Int!
	totalPages: Int!
	totalElements: Int!	
	content: [Person]
}

type UserPage {
	number: Int!
	numberOfElements: Int!
	size: Int!
	totalPages: Int!
	totalElements: Int!	
	content: [User]
}

# Simple Types
type Telephone {
	number: String
	extension: String
}

type CodeLookup {
	code: String
	englishName: String
	frenchName: String
}