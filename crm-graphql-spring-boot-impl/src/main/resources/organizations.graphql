schema {
	query: Query
	mutation: Mutation
}

enum SortOrder {
  ASC
  DESC
}

input Paging {
	pageNumber: Int!
	pageSize: Int!
	sortField: String!
	sortOrder: SortOrder!
}

type Query {	
	findOrganization(organizationId: String!): Organization	
	findOrganizations(paging: Paging!): OrganizationPage
	findLocations(paging: Paging!): LocationPage
}

type Mutation {
	createOrganization(organizationName: String!) : Organization!
}

type Organization {
	organizationId: String!
	status: String!
	displayName: String!
	mainLocation: Location
}

type OrganizationPage {
	totalPages: Int!
	totalElements: Int!	
	numberOfElements: Int!
	content: [Organization]	
}

type Location {
	locationId: String!
	orgId: String!
	status: String!
	reference: String
	displayName: String
	address: MailingAddress	
}

type LocationPage {
	totalPages: Int!
	totalElements: Int!	
	numberOfElements: Int!
	content: [Location]	
}

type MailingAddress {
	street: String
	city: String
	province: String
	country: String
	postalCode: String
}