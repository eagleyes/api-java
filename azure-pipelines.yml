# Build your Java project and run tests with Apache Maven!
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

#Pipeline Configuration
pool:
    vmImage: 'ubuntu-latest'

#variables:
#  - application_name ... application_name variable is defined as a pipeline input variable
#                         To use it in bash , it must be referred as ${APPLICATION_NAME}

trigger:
      - azure
#test
#Stages Configuration (to be ran sequentially)
stages:
  - stage: Build
    jobs:


    - job: Build
      steps:
      - task: Maven@3
        inputs:
          mavenPomFile: 'pom.xml'
          options: '-Dmaven.test.failure.ignore=true'
          publishJUnitResults: true
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          mavenVersionOption: 'Default'
          mavenOptions: '-Xmx3072m'
          mavenAuthenticateFeed: false
          effectivePomSkip: false
          sonarQubeRunAnalysis: false
        
      - task: Bash@3
        name: "Packaging_app_code"
        inputs:
          targetType: 'inline'
          script: |
            # Write your commands here
            #set -x
            echo ${APPLICATION_NAME}
            
            #IN case we want to set an azure variable:
            #echo '##vso[task.setvariable variable=a]20'
            
            #application_name=${application_name} #now from pipeline variable
            application_version=1.0.0-SNAPSHOT
            build_dir="$(System.DefaultWorkingDirectory)/build/${APPLICATION_NAME}"
            config_dir="${build_dir}/config"
            config_file="${config_dir}/application.cfg"
            publish_dir="$(System.DefaultWorkingDirectory)/publish"

            if [ -d $build_dir ];then
              rm -rf $build_dir/*
            else
              mkdir -p $build_dir
            fi

            if [ ! -d $config_dir ];then
              mkdir -p $config_dir
            fi

            if [ ! -d $publish_dir ];then
              mkdir -p $publish_dir
            fi

            cp $(System.DefaultWorkingDirectory)/${APPLICATION_NAME}/target/${APPLICATION_NAME}-*-bootable.jar $build_dir/
            cp -r $(System.DefaultWorkingDirectory)/crm-admin/admin $build_dir/
            
            #Create configuration file
            touch ${config_file}
            echo "export APPLICATION_NAME=${APPLICATION_NAME} >> $config_file"
            echo "export APPLICATION_VERSION=${APPLICATION_NAME} >> $config_file"


            cd ${build_dir}/../ ; tar -cvzf ${publish_dir}/${APPLICATION_NAME}-${application_version}.tgz ${APPLICATION_NAME}
            cp $(System.DefaultWorkingDirectory)/test.sh $(System.DefaultWorkingDirectory)/publish/
            ls -la $(System.DefaultWorkingDirectory)/**
          failOnStderr: true
           
      - publish: $(System.DefaultWorkingDirectory)/publish
        artifact: authApp
  - stage: deploy
    jobs:
    - deployment: Deploy
      displayName: deploy Web App
      environment: 'ut'
      strategy:
      # default deployment strategy, more coming...
        runOnce:
          deploy:
            steps:
            - script: ls -la $(Pipeline.Workspace)/authApp
            - task: CopyFilesOverSSH@0
              inputs:
                sshEndpoint: 'ssh - RD3'
                sourceFolder: '$(Pipeline.Workspace)/authApp/'
                contents: '*.tgz'
                targetFolder: '/var/data/finuser/builds/'
                readyTimeout: '20000'
                failOnEmptySource: true
            - task: SSH@0
              inputs:
                sshEndpoint: 'ssh - RD3'
                runOptions: 'commands'
                commands: 'ls -la /var/data/finuser/builds'
                readyTimeout: '20000'

            - task: SSH@0
              name: "testInline"
              inputs:
                sshEndpoint: 'ssh - RD3'
                runOptions: 'inline'
                inline: 'env;echo "-${application_name}-${app_name}-"'
                readyTimeout: '20000'
              env:
                application_name : "allo"
                app_name: ${application_name}
            - task: SSH@0
              name: "TestScript"
              inputs:
                sshEndpoint: 'ssh - RD3'
                runOptions: 'script'
                scriptPath: '$(Pipeline.Workspace)/authApp/test.sh'
                args: 'allo ${application_name} ${APPLICATION_NAME} ${app_name}'
                readyTimeout: '20000'
              env:
                application_name : "allo"
                app_name: ${application_name}
            
            - task: SSH@0
              name: restartApplication
              inputs:
                sshEndpoint: 'ssh - RD3'
                runOptions: 'commands'
                commands: 'rm -rf /var/data/finuser/apps/${APPLICATION_NAME}; tar -C /var/data/finuser/apps/ -xvzf /var/data/finuser/builds/${application_name}-1.0.0-SNAPSHOT.tgz'
                readyTimeout: '20000'
